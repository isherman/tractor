name: Devel docker images CI

# For all pushes to the devel branch push devel related images to registry tagged as `edge`
on:
  push:
    branches-ignore:
      - "master"
    paths:
      - 'docker/devel/**'
      - '.github/workflows/devel.yml'
      - '!docker/devel/Makefile'
      - '!docker/devel/docker-compose.yml'
      - '!docker/devel/user_devel.Dockerfile'


jobs:
  third_party_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ["libfmt", "cli11", "apriltag", "opencv", "grpc", "ceres", "sophus"]
    # [docs] third_party
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Dockerfile hash
        id: docker_file_hash
        uses: actions/cache@v2
        with:
          path: docker/devel/${{ matrix.image }}.Dockerfile
          key: ${{ runner.os }}-${{ matrix.image }}-${{ hashFiles( format('docker/devel/{0}.Dockerfile', matrix.image) ) }}

      - name: Prepare
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: prep
        run: |
          DOCKER_IMAGE=farmng/build-${{ matrix.image }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./docker/devel
          file: ./docker/devel/${{ matrix.image }}.Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      -
        name: Image digest
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        run: echo ${{ steps.docker_build.outputs.digest }} > docker/devel/${{ matrix.image }}-digest.txt

      - uses: actions/upload-artifact@v2
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        with:
          name: ${{ matrix.image }}-digest
          path: docker/devel/${{ matrix.image }}-digest.txt



  devel_build:
    needs: third_party_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Dockerfile hash
        id: docker_file_hash
        uses: actions/cache@v2
        with:
          path: docker/devel
          key: ${{ runner.os }}-devel-${{ hashFiles('docker/devel/*.Dockerfile') }}


      - name: Prepare
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: prep
        run: |
          DOCKER_IMAGE=farmng/devel
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-devel-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-devel-
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download digests
        uses: actions/download-artifact@v2
        with:
          path: docker/devel/

      - name: Commit changes
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: EndBug/add-and-commit@v7
        with:
          author_name: Devel Build Action
          author_email: devel_build@noreply
          message: 'Update digests.'
          add: "docker/devel/*-digest.txt"

      - name: Get digest
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: vars
        run: |
          echo ::set-output name=cli11::$(cat docker/devel/cli11-digest/cli11-digest.txt)
          echo ::set-output name=libfmt::$(cat docker/devel/libfmt-digest/libfmt-digest.txt)
          echo ::set-output name=apriltag::$(cat docker/devel/apriltag-digest/apriltag-digest.txt)
          echo ::set-output name=ceres::$(cat docker/devel/ceres-digest/ceres-digest.txt)
          echo ::set-output name=grpc::$(cat docker/devel/grpc-digest/grpc-digest.txt)
          echo ::set-output name=opencv::$(cat docker/devel/opencv-digest/opencv-digest.txt)
          echo ::set-output name=sophus::$(cat docker/devel/sophus-digest/sophus-digest.txt)
      - name: Build and push
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./docker/devel
          file: ./docker/devel/devel.Dockerfile
          build-args: |
            libfmt_tag=farmng/build-libfmt@${{steps.vars.outputs.libfmt}}
            cli11_tag=farmng/build-cli11@${{steps.vars.outputs.cli11}}
            apriltag_tag=farmng/build-apriltag@${{steps.vars.outputs.apriltag}}
            ceres_tag=farmng/build-ceres@${{steps.vars.outputs.ceres}}
            grpc_tag=farmng/build-grpc@${{steps.vars.outputs.grpc}}
            opencv_tag=farmng/build-opencv@${{steps.vars.outputs.opencv}}
            sophus_tag=farmng/build-sophus@${{steps.vars.outputs.sophus}}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      -
        name: Image digest
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        run: echo ${{ steps.docker_build.outputs.digest }} > docker/devel/devel-digest.txt

      - uses: actions/upload-artifact@v2
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        with:
          name: devel_digest
          path: docker/devel/devel-digest.txt

      - name: Commit changes
        if: steps.docker_file_hash.outputs.cache-hit != 'true'
        uses: EndBug/add-and-commit@v6
        with:
          author_name: Devel Build Action
          author_email: devel_build@noreply
          message: 'Update devel digest: farmng/devel@${{ steps.docker_build.outputs.digest }}'
          add: docker/devel/devel-digest.txt
  build:
    needs: devel_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache devel_home volume
        uses: actions/cache@v2
        with:
          path: .devel_home
          key: ${{ runner.os }}-x86-devel_home-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-x86-devel_home-

      - name: Build Docs
        run: ./devel.sh make docs

      - name: Clean
        run: ./devel.sh make clean

      - name: Build Cpp
        run: ./devel.sh make cpp

      - name: Build Webservices
        run: ./devel.sh make webservices
