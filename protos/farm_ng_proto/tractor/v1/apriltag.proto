syntax = "proto3";

import "farm_ng_proto/tractor/v1/image.proto";
import "farm_ng_proto/tractor/v1/geometry.proto";

package farm_ng_proto.tractor.v1;
option go_package = "github.com/farm_ng/genproto";

enum ApriltagFamily {
  APRILTAG_FAMILY_UNSPECIFIED = 0;
  APRILTAG_FAMILY_TAG36H11 = 1;
}

// protobuf copy of the ApriltagDetection struct from apriltag library.
// source: https://github.com/AprilRobotics/apriltag/blob/master/apriltag.h#L196
// comments copied for reference.
message ApriltagDetection {
  ApriltagFamily tag_family = 1;

  // The decoded ID of the tag
  int32 id = 2;

  // How many error bits were corrected? Note: accepting large numbers of
  // corrected errors leads to greatly increased false positive rates.
  // NOTE: As of this implementation, the detector cannot detect tags with
  // a hamming distance greater than 2.
  int32 hamming = 3;

  // A measure of the quality of the binary decoding process: the
  // average difference between the intensity of a data bit versus
  // the decision threshold. Higher numbers roughly indicate better
  // decodes. This is a reasonable measure of detection accuracy
  // only for very small tags-- not effective for larger tags (where
  // we could have sampled anywhere within a bit cell and still
  // gotten a good detection.)
  float decision_margin = 4;

  // The 3x3 homography matrix describing the projection from an
  // "ideal" tag (with corners at (-1,1), (1,1), (1,-1), and (-1,
  // -1)) to pixels in the image.
  // TODO(ethanrublee) consider removing this as its not valid for fisheye.
  Matrix image_h_tag = 5;

  // SE3 pose of tag, typically in the camera frame.
  NamedSE3Pose pose = 8;

  // The center of the detection in image pixel coordinates.
  Vec2 c = 6;

  // The corners of the tag in image pixel coordinates. These always
  // wrap counter-clock wise around the tag.
  repeated Vec2 p = 7;

  // Size of the tag, outside corner to corner on one side, in meters.
  double tag_size = 9;
}

message ApriltagDetections {
  repeated ApriltagDetection detections = 1;
  Image image = 2;
}

//  A rigid collection of apriltags, useful for pose estimation and calibration
//  fixtures.
message ApriltagRig {
  message Node {
    // the apriltag tag id.
    int32 id = 1;
    // the frame name for this node (used in NameSE3Pose)
    // <rig name>/tag/<id %05d>
    string frame_name = 2;
    // Tag size in meters, same as in ApriltagDetection above.
    double tag_size = 3;
    // The tag corner points, in the tag's reference frame
    repeated Vec3 points_tag = 4;
    // The pose of the tag w.r.t. to some frame in the rig.
    // One of the frames will this node's tag frame (frame_name), the other will
    // typically be the root tag id in the rig.
    // The order is (frame_a,frame_b) is dependent on the solver implementation,
    // and should be checked at runtime.
    NamedSE3Pose pose = 5;
  }
  // Name of the rig, used for constructing frame names.
  string name = 1;
  // The root tag id which is used as the root frame of this rig,
  // tag poses are typically with respect to this tag id.
  // TODO(ethanrublee) NOTE In the future, there may be an arbitrary rig frame
  // which is related with a rigid pose to the root tag id.
  int32 root_tag_id = 2;

  // The set of nodes that make up this rig.
  repeated Node nodes = 3;
}

message TagConfig {
  // Apriltag tag ID
  int32 id = 1;

  // Tag size in meters
  double size = 2;
}

message TagLibrary {
  repeated TagConfig tags = 1;
}


message ApriltagConfig {
  TagLibrary tag_library = 1;
}
